description = "Bakery Spring Multistore Config"

defaultTasks 'build'

ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"
}

buildscript {
	repositories {
		mavenCentral()
		maven { url "http://repo.spring.io/plugins-release" }		
		maven { url "http://repo.spring.io/plugins-milestone" }
		maven { url "http://repo.spring.io/plugins-snapshot" }
	}
	dependencies {
		classpath "org.springframework.build.gradle:bundlor-plugin:$gradleSpringBundlorPluginVersion"
	}
}

task wrapper(type: Wrapper) {
	description = "Generates gradlew[.bat] scripts"
	gradleVersion = "$gradleVersion"
  
	doLast() {
	  def gradleOpts = "-XX:MaxPermSize=1024m -Xmx1024m"
	  def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256m"
	  File wrapperFile = file("gradlew")
	  wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
												  "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
	  File wrapperBatFile = file("gradlew.bat")
	  wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
														"set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
	}
}

configure(allprojects) {
	
	apply plugin: "java"
	apply plugin: "idea"
	apply plugin: "eclipse"
	apply plugin: "maven"
	apply from: "${gradleScriptDir}/maven.gradle"
	apply from: "${gradleScriptDir}/ide.gradle"
  
	configurations {
	  all {
		//Hack to let Gradle pickup latest SNAPSHOTS
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		exclude group: "commons-logging"
        exclude group: "org.apache.avro"
		exclude module: "slf4j-log4j12"
		exclude module: "hibernate-jpa-2.0-api"
	  }
	}
	
	project.sourceCompatibility = 1.7
	project.targetCompatibility = 1.7
	
	[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none", "-g", "-encoding", "UTF-8"]
  
	//sourceSets.test.resources.srcDirs = ["src/test/java", "src/test/resources"]
  
  	repositories {
	  mavenLocal()
	  mavenCentral()
	  maven { url "http://repo.spring.io/libs-release" }
	  maven { url "http://repo.spring.io/libs-milestone" }
	  maven { url "http://repo.spring.io/libs-snapshot" }
	  maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
	  maven { url "https://raw.github.com/gmind7/bakery.maven.repository/master/lib-releases" }
	}
	
    uploadArchives {
	  repositories.mavenDeployer {
		repository(url: "file://D:/Git/bakery.maven.repository/lib-releases")
		snapshotRepository(url: "file://D:/Git/bakery.maven.repository/lib-snapshots")
	  }
	}

	task uploadReleaseArchives(description: "Uploads all artifacts belonging to release configuration..") {
		dependsOn uploadArchives
	}
	
	gradle.taskGraph.whenReady {taskGraph ->
		if (taskGraph.hasTask(uploadReleaseArchives)) {
			version += '-RELEASE'
		} else {
			version += '-SNAPSHOT'
		}
	}
	  
	dependencies {
	  // Logging
	  runtime "ch.qos.logback:logback-classic:$logbackVersion"
	  compile "org.slf4j:slf4j-api:$slf4jVersion"
	  runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
	  
	  // Testing
	  testCompile "junit:junit:$junitVersion"
	  testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
	  testCompile "com.jayway.jsonpath:json-path:$jsonpathVersion"
	  testCompile "org.mockito:mockito-core:$mockitoVersion"
	}
}

configure(subprojects) { subproject ->

	group = "${group}"
	
	javadoc {
	  options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	  options.author = true
	  options.header = subproject.name
	}
	
	task sourcesJar(type: Jar, dependsOn: classes) {
	  classifier = "sources"
	  from sourceSets.main.allJava
	}
	task javadocJar(type: Jar) {
	  classifier = "javadoc"
	  from javadoc
	}
  
	artifacts {
	  archives sourcesJar
	  archives javadocJar
	}

	dependencies {
	  // Gmind7
	  compile("com.gmind7.bakery:bakery-spring-application-config:$bakerySpringApplicationVersion") { force = true }
		
	  // Spring
	  compile("org.springframework:spring-core:$springVersion") { force = true }
	  compile("org.springframework:spring-beans:$springVersion") { force = true }	
	  compile("org.springframework:spring-context:$springVersion") { force = true }
	  compile("org.springframework:spring-context-support:$springVersion") { force = true }
	  compile("org.springframework:spring-aop:$springVersion") { force = true }
	  compile("org.springframework:spring-aspects:$springVersion") { force = true }
      compile("org.springframework:spring-expression:$springVersion") { force = true }
	  compile("org.springframework:spring-tx:$springVersion") { force = true }
	  
	  // AspectJ
	  compile "org.aspectj:aspectjrt:$aspectjVersion"
	  compile "org.aspectj:aspectjweaver:$aspectjVersion"
	  compile "aopalliance:aopalliance:$aopallianceVersion"
	  
	  // Jackson
      compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
      compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:$jacksonVersion"
	  
	  // JSR 303 with Hibernate Validator
	  compile "javax.validation:validation-api:$javaxValidationVersion"
	  compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
	  
	  // Etc Supporting libraries
	  runtime "cglib:cglib-nodep:$cglibVersion"
	  compile "com.google.guava:guava:$guavaVersion"
	  compile "joda-time:joda-time:$jodaVersion"
	  //providedCompile "org.projectlombok:lombok:$lombokVersion"
	  
	  // APIs
      compile "javax.inject:javax.inject:$javaxInjectVersion"
      
	  // Testing
      testCompile("org.springframework:spring-test:$springVersion") { force = true }
    }
}

project("bakery-spring-ehcache-config"){
	
	version = "$bakerySpringEhcacheConfigVersion"
	
	dependencies {
      // Ehcache
	  compile "org.hibernate:hibernate-ehcache:$hibernateVersion"
	  compile "net.sf.ehcache:ehcache-core:$ehcacheVersion"
	}
}

project("bakery-spring-memcached-config"){
	
	version = "$bakerySpringMemcachedConfigVersion"
	
	dependencies {
	  // Memcached
	  compile "com.google.code.simple-spring-memcached:simple-spring-memcached:$ssmVersion"
	  compile "com.google.code.simple-spring-memcached:spring-cache:$ssmVersion"
	  compile "com.google.code.simple-spring-memcached:spymemcached-provider:$ssmVersion"
	  compile "net.spy:spymemcached:$spyMemcachedVersion"
	}
}

project("bakery-spring-infinispan-config"){
	
	version = "$bakerySpringInfinispanConfigVersion"
	
	dependencies {
	  // Infinispan
	  compile "org.infinispan:infinispan-client-hotrod:$infinispanVersion"            
      compile "org.infinispan:infinispan-spring:$infinispanVersion"
      compile "org.infinispan:infinispan-remote-query-client:$infinispanVersion"
      compile "org.infinispan:infinispan-query-dsl:$infinispanVersion"
    }
}

project("bakery-spring-database-config"){
	
	version = "$bakerySpringDatabaseConfigVersion"
	
	apply from: "${gradleScriptDir}/querydsl.gradle"
	
	dependencies {
	  // Bakery
	  compile project(":bakery-spring-ehcache-config")
	  
	  // Spring
	  compile("org.springframework:spring-orm:$springVersion") { force = true }
	  compile("org.springframework:spring-jdbc:$springVersion") { force = true }
	  compile("org.springframework.data:spring-data-jpa:$springDataJpaVersion") { force=true }
	  compile("org.springframework.data:spring-data-redis:$springDataRedisVersion") { force=true }
	  compile("org.springframework.data:spring-data-jdbc-core:$springDataJdbcVersion") { force=true }
	  compile("org.springframework.data:spring-data-jpa:$springDataJpaVersion") { force=true }
	  
	  // RDBMS
	  runtime "org.hsqldb:hsqldb:$hsqldbVersion"
	  compile "org.apache.tomcat:tomcat-jdbc:$apacheTomcatVersion"
	  	   
	  // Hibernate
	  compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"
	  
	  // Mybatis
	  compile "org.mybatis:mybatis:$mybatisVersion"
	  compile "org.mybatis:mybatis-spring:$mybatisSpringVersion"
	  
	  // QueryDSL
	  compile "com.mysema.querydsl:querydsl-apt:$querydslVersion"
	  compile "com.mysema.querydsl:querydsl-jpa:$querydslVersion"
	  
	  // Ehcache
	  compile "org.hibernate:hibernate-ehcache:$hibernateVersion"
	  compile "net.sf.ehcache:ehcache-core:$ehcacheVersion"
	  
    }
}

project("bakery-spring-redis-config"){
	
	version = "$bakerySpringRedisConfigVersion"
	
	dependencies {
	  // Spring
	  compile("org.springframework.data:spring-data-redis:$springDataRedisVersion") { force = true }
	  // Redis
	  compile "redis.clients:jedis:$jedisVersion"
	}
}